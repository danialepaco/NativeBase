{"version":3,"sources":["../../../src/basic/Button.js"],"names":["Button","borderedBtn","borderWidth","props","bordered","undefined","borderRadius","rounded","variable","borderRadiusLarge","defaultProps","style","getInitialStyle","variables","context","theme","children","Platform","OS","androidRipple","prepareRootProps","_root","c","activeOpacity","buttonStyle","buttonFlex","full","block","flex","maxHeight","height","paddingTop","paddingBottom","styles","childContainer","flexGrow","onPress","Component","contextTypes","PropTypes","object","propTypes","TouchableOpacity","oneOfType","number","array","bool","primary","transparent","success","danger","warning","info","disabled","large","small","active","StyleSheet","create","flexShrink","flexDirection","justifyContent","alignItems","StyledButton","mapPropsToStyleNames"],"mappings":"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","file":"Button.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  TouchableOpacity,\n  Platform,\n  View,\n  TouchableNativeFeedback,\n  StyleSheet\n} from \"react-native\";\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport variable from \"./../theme/variables/platform\";\nimport { Text } from \"./Text\";\nimport computeProps from \"../utils/computeProps\";\n\nimport mapPropsToStyleNames from \"../utils/mapPropsToStyleNames\";\n\nclass Button extends Component {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n\n  getInitialStyle() {\n    return {\n      borderedBtn: {\n        borderWidth: this.props.bordered ? 1 : undefined,\n        borderRadius:\n          this.props.rounded && this.props.bordered\n            ? variable.borderRadiusLarge\n            : 2\n      }\n    };\n  }\n\n  _root: React$Element<TouchableOpacity | TouchableNativeFeedback>;\n\n  prepareRootProps() {\n    const defaultProps = {\n      style: this.getInitialStyle().borderedBtn\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\n      : variable;\n    const children =\n      Platform.OS === \"ios\"\n        ? this.props.children\n        : this.props.children\n    if (\n      Platform.OS === \"ios\" ||\n      Platform.OS === \"web\" ||\n      variables.androidRipple === false ||\n      Platform[\"Version\"] < 21\n    ) {\n      return (\n        <TouchableOpacity\n          {...this.prepareRootProps()}\n          ref={c => (this._root = c)}\n          activeOpacity={\n            this.props.activeOpacity > 0 ? this.props.activeOpacity : 0.5\n          }\n        >\n          {children}\n        </TouchableOpacity>\n      );\n    } else {\n        if(this.props.rounded){\n            let buttonStyle = { ...this.prepareRootProps().style };\n            let buttonFlex = (this.props.full || this.props.block) ? 1 : buttonStyle.flex;\n            return (\n              <View style={[{ maxHeight:buttonStyle.height }, buttonStyle, { paddingTop: undefined, paddingBottom: undefined, flex:buttonFlex }]} >\n                <TouchableOpacity\n                  ref={c => (this._root = c)}\n                  // background={\n                  //   this.props.androidRippleColor\n                  //     ? TouchableNativeFeedback.Ripple(this.props.androidRippleColor, true)\n                  //     : TouchableNativeFeedback.Ripple(variables.androidRippleColor, true)\n                  // }\n                  { ...this.prepareRootProps() }\n                >\n                  // <View style={[styles.childContainer, { paddingTop: buttonStyle.paddingTop, paddingBottom: buttonStyle.paddingBottom, height: buttonStyle.height,flexGrow:buttonFlex }]}>\n                  //   {children}\n                  // </View>\n                </TouchableOpacity>\n              </View >\n            );\n        } else {\n            return (\n              <TouchableOpacity\n                ref={c => (this._root = c)}\n                onPress={this.props.onPress}\n                {...this.prepareRootProps()}\n              >\n                <View {...this.prepareRootProps()}>{children}</View>\n              </TouchableOpacity>\n            );\n        }\n    }\n  }\n}\n\nButton.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  block: PropTypes.bool,\n  primary: PropTypes.bool,\n  transparent: PropTypes.bool,\n  success: PropTypes.bool,\n  danger: PropTypes.bool,\n  warning: PropTypes.bool,\n  info: PropTypes.bool,\n  bordered: PropTypes.bool,\n  disabled: PropTypes.bool,\n  rounded: PropTypes.bool,\n  large: PropTypes.bool,\n  small: PropTypes.bool,\n  active: PropTypes.bool\n};\n\nconst styles = StyleSheet.create({\n\tchildContainer: {\n\t\tflexShrink: 1,\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center'\n\t},\n});\n\nconst StyledButton = connectStyle(\n  \"NativeBase.Button\",\n  {},\n  mapPropsToStyleNames\n)(Button);\nexport { StyledButton as Button };\n"]}